b=1;
func=1;
println("func:",func);
func(a)={println("b:",b," a:",a);b=a+1;println("b:",b," a:",a);b=b};
println("defined func:a:",a);
a=func(1);
println("a:",a," b:",b);



b=2;
c=1+func(b);
println("a:",a," b:",b," c:",c);


c=0;
b={c=arguments[0]+1;};
e=b(3);
println("c:",c," e:"+e);


/*b=(4+2)*3;*/
/*b=test(1)+1;*/


/*println(test(2)," hallo"," ",1," welt"," ",{"ende"}());*/

/*b=2;
b= (1+2);
b=-2 -(1+1);
b=-5;
b=(-1-1);
*/


/*b=((1)+(1));*/
/*b=-(-1+3);*/
/*b=-(2);*/
/*b=((-2*6));*/
b=-1+-(2*((4+1)))-1;
println("b:",b);

/*
g= - 1 -1;
e= -1;
c=-1;
d= 1.4;
f= -(+1+-1);
g= 1 + -1;
h= 1+-1;
*/

/*println("a:",a);*/


?(2==1,{println("true")},{println("false")},0).else({println("executed else")});

if(exp,_do)={?(exp,_do,{},0)};

b=open("tests/test_yeti.json","rb").close();

/*a=open("tests/test_yeti.json","rb").readall().close();
println(a);
*/

/*a=handler_test(1);*/
/*println("a:",a,"b:",b,"c:",c,"d:",d);*/

/*o=0;*/
??(o=1,{println("checking o:",o);o<3},{println("o:",o);o=o+1},{},1);


a=open("tests/test_yeti.json","rb").readall().close();
println(a);

println("deep check");
if({1==2},{println("true if")}).else({println("else if")});
